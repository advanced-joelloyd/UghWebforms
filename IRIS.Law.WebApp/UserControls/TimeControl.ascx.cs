using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace IRIS.Law.WebApp.UserControls
{
    public partial class TimeControl : System.Web.UI.UserControl
    {

        #region InvalidValueMessage
        public string InvalidValueMessage
        {
            set
            {
                _mevTime.InvalidValueMessage = value;
                _rfvTime.ErrorMessage = value;
            }
        }
        #endregion

        #region TimeText
        public string TimeText
        {
            get { return _txtTime.Text; }
            set { _txtTime.Text = value; }
        }
        #endregion

        #region Enabled
        public bool Enabled
        {
            set
            {
                _txtTime.Enabled = value;
            }
        }
        #endregion

        #region TimeTextBoxUniqueID
        public string TimeTextBoxUniqueID
        {
            get { return _txtTime.UniqueID; }
        }
        #endregion

        #region TimeTextBoxClientID
        public string TimeTextBoxClientID
        {
            get { return _txtTime.ClientID; }
        }
        #endregion

        #region EnableValidation
        /// <summary>
        /// Gets or sets a value indicating whether the client field is mandatory
        /// </summary>
        /// <value><c>true</c> if mandatory; otherwise, <c>false</c>.</value>
        public bool EnableValidation { get; set; }
        #endregion

        #region Validation Group

        public string ValidationGroup
        {
            get { return _mevTime.ValidationGroup; }
            set { _mevTime.ValidationGroup = value; }
        }

        #endregion

        #region public Events

        public delegate void TimeChangedEventHandler(object sender, EventArgs e);
        /// <summary>
        /// Occurs when the client reference changes.
        /// </summary>
        public event TimeChangedEventHandler TimeChanged;

        protected virtual void OnTimeChanged(EventArgs e)
        {
            if (TimeChanged != null)
            {
                TimeChanged(this, e);
            }
        }

        #endregion


        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (EnableValidation == true)
                {
                    _pnlValidation.Visible = true;
                    _mevTime.InvalidValueMessage = string.Empty;
                }
            }
        }


        #region Time Text Changed
        /// <summary>
        /// On Change of UFN Date or Fee Earner, the UFN Number will be autogenerated
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void _txtTime_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (TimeChanged != null)
                {
                    OnTimeChanged(e);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
    }
}