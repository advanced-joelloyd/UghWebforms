//Core MyCSSMenu Code
var qm_si, qm_li, qm_lo, qm_tt, qm_th, qm_ts, qm_la, qm_ic, qm_ib; var qp = "parentNode"; var qc = "className"; var qm_t = navigator.userAgent; var qm_o = qm_t.indexOf("Opera") + 1; var qm_s = qm_t.indexOf("afari") + 1; var qm_s2 = qm_s && qm_t.indexOf("ersion/2") + 1; var qm_s3 = qm_s && qm_t.indexOf("ersion/3") + 1; var qm_n = qm_t.indexOf("Netscape") + 1; var qm_v = parseFloat(navigator.vendorSub); ; function qm_create(sd, v, ts, th, oc, rl, sh, fl, ft, aux, l) { var w = "onmouseover"; var ww = w; var e = "onclick"; if (oc) { if (oc == "all" || (oc == "lev2" && l >= 2)) { w = e; ts = 0; } if (oc == "all" || oc == "main") { ww = e; th = 0; } } if (!l) { l = 1; qm_th = th; sd = document.getElementById("qm" + sd); if (window.qm_pure) sd = qm_pure(sd); sd[w] = function(e) { qm_kille(e) }; document[ww] = qm_bo; if (oc == "main") { qm_ib = true; sd[e] = function(event) { qm_ic = true; qm_oo(new Object(), qm_la, 1); qm_kille(event) }; document.onmouseover = function() { qm_la = null; clearTimeout(qm_tt); qm_tt = null; }; } sd.style.zoom = 1; if (sh) x2("qmsh", sd, 1); if (!v) sd.ch = 1; } else if (sh) sd.ch = 1; if (oc) sd.oc = oc; if (sh) sd.sh = 1; if (fl) sd.fl = 1; if (ft) sd.ft = 1; if (rl) sd.rl = 1; sd.style.zIndex = l + "" + 1; var lsp; var sp = sd.childNodes; for (var i = 0; i < sp.length; i++) { var b = sp[i]; if (b.tagName == "A") { lsp = b; b[w] = qm_oo; if (w == e) b.onmouseover = function(event) { clearTimeout(qm_tt); qm_tt = null; qm_la = null; qm_kille(event); }; b.qmts = ts; if (l == 1 && v) { b.style.styleFloat = "none"; b.style.cssFloat = "none"; } } else if (b.tagName == "DIV") { if (window.showHelp && !window.XMLHttpRequest) sp[i].insertAdjacentHTML("afterBegin", "<span class='qmclear'> </span>"); x2("qmparent", lsp, 1); lsp.cdiv = b; b.idiv = lsp; if (qm_n && qm_v < 8 && !b.style.width) b.style.width = b.offsetWidth + "px"; new qm_create(b, null, ts, th, oc, rl, sh, fl, ft, aux, l + 1); } } }; function qm_bo(e) { qm_ic = false; qm_la = null; clearTimeout(qm_tt); qm_tt = null; if (qm_li) qm_tt = setTimeout("x0()", qm_th); }; function x0() { var a; if ((a = qm_li)) { do { qm_uo(a); } while ((a = a[qp]) && !qm_a(a)) } qm_li = null; }; function qm_a(a) { if (a[qc].indexOf("qmmc") + 1) return 1; }; function qm_uo(a, go) { if (!go && a.qmtree) return; if (window.qmad && qmad.bhide) eval(qmad.bhide); a.style.visibility = ""; x2("qmactive", a.idiv); }; ; function qa(a, b) { return String.fromCharCode(a.charCodeAt(0) - (b - (parseInt(b / 2) * 2))); }; function qm_oo(e, o, nt) { if (!o) o = this; if (qm_la == o && !nt) return; if (window.qmv_a && !nt) qmv_a(o); if (window.qmwait) { qm_kille(e); return; } clearTimeout(qm_tt); qm_tt = null; qm_la = o; if (!nt && o.qmts) { qm_si = o; qm_tt = setTimeout("qm_oo(new Object(),qm_si,1)", o.qmts); return; } var a = o; if (a[qp].isrun) { qm_kille(e); return; } if (qm_ib && !qm_ic) return; var go = true; while ((a = a[qp]) && !qm_a(a)) { if (a == qm_li) go = false; } if (qm_li && go) { a = o; if ((!a.cdiv) || (a.cdiv && a.cdiv != qm_li)) qm_uo(qm_li); a = qm_li; while ((a = a[qp]) && !qm_a(a)) { if (a != o[qp] && a != o.cdiv) qm_uo(a); else break; } } var b = o; var c = o.cdiv; if (b.cdiv) { var aw = b.offsetWidth; var ah = b.offsetHeight; var ax = b.offsetLeft; var ay = b.offsetTop; if (c[qp].ch) { aw = 0; if (c.fl) ax = 0; } else { if (c.ft) ay = 0; if (c.rl) { ax = ax - c.offsetWidth; aw = 0; } ah = 0; } if (qm_o) { ax -= b[qp].clientLeft; ay -= b[qp].clientTop; } if (qm_s2 && !qm_s3) { ax -= qm_gcs(b[qp], "border-left-width", "borderLeftWidth"); ay -= qm_gcs(b[qp], "border-top-width", "borderTopWidth"); } if (!c.ismove) { c.style.left = (ax + aw) + "px"; c.style.top = (ay + ah) + "px"; } x2("qmactive", o, 1); if (window.qmad && qmad.bvis) eval(qmad.bvis); c.style.visibility = "inherit"; qm_li = c; } else if (!qm_a(b[qp])) qm_li = b[qp]; else qm_li = null; qm_kille(e); }; function qm_gcs(obj, sname, jname) { var v; if (document.defaultView && document.defaultView.getComputedStyle) v = document.defaultView.getComputedStyle(obj, null).getPropertyValue(sname); else if (obj.currentStyle) v = obj.currentStyle[jname]; if (v && !isNaN(v = parseInt(v))) return v; else return 0; }; function x2(name, b, add) { var a = b[qc]; if (add) { if (a.indexOf(name) == -1) b[qc] += (a ? ' ' : '') + name; } else { b[qc] = a.replace(" " + name, ""); b[qc] = b[qc].replace(name, ""); } }; function qm_kille(e) { if (!e) e = event; e.cancelBubble = true; if (e.stopPropagation && !(qm_s && e.type == "click")) e.stopPropagation(); }; function qm_pure(sd) { if (sd.tagName == "UL") { var nd = document.createElement("DIV"); nd.qmpure = 1; var c; if (c = sd.style.cssText) nd.style.cssText = c; qm_convert(sd, nd); var csp = document.createElement("SPAN"); csp.className = "qmclear"; csp.innerHTML = " "; nd.appendChild(csp); sd = sd[qp].replaceChild(nd, sd); sd = nd; } return sd; }; function qm_convert(a, bm, l) { if (!l) bm[qc] = a[qc]; bm.id = a.id; var ch = a.childNodes; for (var i = 0; i < ch.length; i++) { if (ch[i].tagName == "LI") { var sh = ch[i].childNodes; for (var j = 0; j < sh.length; j++) { if (sh[j] && (sh[j].tagName == "A" || sh[j].tagName == "SPAN")) bm.appendChild(ch[i].removeChild(sh[j])); if (sh[j] && sh[j].tagName == "UL") { var na = document.createElement("DIV"); var c; if (c = sh[j].style.cssText) na.style.cssText = c; if (c = sh[j].className) na.className = c; na = bm.appendChild(na); new qm_convert(sh[j], na, 1) } } } } }

//Add-On Core Code (Remove when not using any add-on's)
document.write('<style type="text/css">.qmfv{visibility:visible !important;}.qmfh{visibility:hidden !important;}</style><script type="text/JavaScript">var qmad = new Object();qmad.bvis="";qmad.bhide="";</script>');

var cssCorners = getcss('.SubMenuBackground')

/*******  Menu 0 Add-On Settings *******/
var a = qmad.qm0 = new Object();

// Hover Fill Item Effect Add On
a.hoverfill_apply_to = "all";
a.hoverfill_main_type = "none";
a.hoverfill_sub_type = "grow";
a.hoverfill_sub_direction = "up";
a.hoverfill_sub_step_size = 2;

// Rounded Corners Add On



a.rcorner_size = 4;
a.rcorner_border_color = cssCorners;  //"black";
a.rcorner_bg_color = cssCorners; //"transparent";
a.rcorner_top_line_auto_inset = true;

// Rounded Items Add On
a.ritem_size = 4;
a.ritem_apply = "main";
a.ritem_main_apply_corners = new Array(true, true, true, true);


//Add-On Code: Rounded Corners
qmad.rcorner = new Object(); qmad.br_ie7 = navigator.userAgent.indexOf("MSIE 7") + 1; if (qmad.bvis.indexOf("qm_rcorner(b.cdiv);") == -1) qmad.bvis += "qm_rcorner(b.cdiv);"; ; function qm_rcorner(a, hide, force) { var z; if (!hide && ((z = window.qmv) && (z = z.addons) && (z = z.round_corners) && !z["on" + qm_index(a)])) return; var q = qmad.rcorner; if ((!hide && !a.hasrcorner) || force) { var ss; if (!a.settingsid) { var v = a; while ((v = v.parentNode)) { if (v.className.indexOf("qmmc") + 1) { a.settingsid = v.id; break; } } } ss = qmad[a.settingsid]; if (!ss) return; if (!ss.rcorner_size) return; q.size = ss.rcorner_size; q.background = ss.rcorner_bg_color; if (!q.background) q.background = "transparent"; q.border = ss.rcorner_border_color; if (!q.border) q.border = "#ff0000"; q.angle = ss.rcorner_angle_corners; q.corners = ss.rcorner_apply_corners; if (!q.corners || q.corners.length < 4) q.corners = new Array(true, 1, 1, 1); q.tinset = 0; if (ss.rcorner_top_line_auto_inset && qm_a(a[qp])) q.tinset = a.idiv.offsetWidth; q.opacity = ss.rcorner_opacity; if (q.opacity && q.opacity != 1) { var addf = ""; if (window.showHelp) addf = "filter:alpha(opacity=" + (q.opacity * 100) + ");"; q.opacity = "opacity:" + q.opacity + ";" + addf; } else q.opacity = ""; var f = document.createElement("SPAN"); x2("qmrcorner", f, 1); var fs = f.style; fs.position = "absolute"; fs.display = "block"; fs.top = "0px"; fs.left = "0px"; var size = q.size; q.mid = parseInt(size / 2); q.ps = new Array(size + 1); var t2 = 0; q.osize = q.size; if (!q.angle) { for (var i = 0; i <= size; i++) { if (i == q.mid) t2 = 0; q.ps[i] = t2; t2 += Math.abs(q.mid - i) + 1; } q.osize = 1; } var fi = ""; for (var i = 0; i < size; i++) fi += qm_rcorner_get_span(size, i, 1, q.tinset); fi += '<span qmrcmid=1 style="background-color:' + q.background + ';border-color:' + q.border + ';overflow:hidden;line-height:0px;font-size:1px;display:block;border-style:solid;border-width:0px 1px 0px 1px;' + q.opacity + '"></span>'; for (var i = size - 1; i >= 0; i--) fi += qm_rcorner_get_span(size, i); f.innerHTML = fi; f.noselect = 1; a.insertBefore(f, a.firstChild); a.hasrcorner = f; } var b = a.hasrcorner; if (b) { if (!a.offsetWidth) a.style.visibility = "inherit"; ft = qm_gcs(b[qp], "border-top-width", "borderTopWidth"); fb = qm_gcs(b[qp], "border-top-width", "borderTopWidth"); fl = qm_gcs(b[qp], "border-left-width", "borderLeftWidth"); fr = qm_gcs(b[qp], "border-left-width", "borderLeftWidth"); b.style.width = (a.offsetWidth - fl) + "px"; b.style.height = (a.offsetHeight - fr) + "px"; if (qmad.br_ie7) { var sp = b.getElementsByTagName("SPAN"); for (var i = 0; i < sp.length; i++) sp[i].style.visibility = "inherit"; } b.style.visibility = "inherit"; var s = b.childNodes; for (var i = 0; i < s.length; i++) { if (s[i].getAttribute("qmrcmid")) s[i].style.height = Math.abs((a.offsetHeight - (q.osize * 2) - ft - fb)) + "px"; } } }; function qm_rcorner_get_span(size, i, top, tinset) { var q = qmad.rcorner; var mlmr; if (i == 0) { var mo = q.ps[size] + q.mid; if (q.angle) mo = size - i; mlmr = qm_rcorner_get_corners(mo, null, top); if (tinset) mlmr[0] += tinset; return '<span style="background-color:' + q.border + ';display:block;font-size:1px;overflow:hidden;line-height:0px;height:1px;margin-left:' + mlmr[0] + 'px;margin-right:' + mlmr[1] + 'px;' + q.opacity + '"></span>'; } else { var md = size - (i); var ih = 1; var bs = 1; if (!q.angle) { if (i >= q.mid) ih = Math.abs(q.mid - i) + 1; else { bs = Math.abs(q.mid - i) + 1; md = q.ps[size - i] + q.mid; } if (top) q.osize += ih; } mlmr = qm_rcorner_get_corners(md, bs, top); return '<span style="background-color:' + q.background + ';border-color:' + q.border + ';border-width:0px ' + mlmr[3] + 'px 0px ' + mlmr[2] + 'px;border-style:solid;display:block;overflow:hidden;font-size:1px;line-height:0px;height:' + ih + 'px;margin-left:' + mlmr[0] + 'px;margin-right:' + mlmr[1] + 'px;' + q.opacity + '"></span>'; } }; function qm_rcorner_get_corners(mval, bval, top) { var q = qmad.rcorner; var ml = mval; var mr = mval; var bl = bval; var br = bval; if (top) { if (!q.corners[0]) { ml = 0; bl = 1; } if (!q.corners[1]) { mr = 0; br = 1; } } else { if (!q.corners[2]) { mr = 0; br = 1; } if (!q.corners[3]) { ml = 0; bl = 1; } } return new Array(ml, mr, bl, br); }

//Add-On Code: Rounded Items
qmad.br_navigator = navigator.userAgent.indexOf("Netscape") + 1; qmad.br_version = parseFloat(navigator.vendorSub); qmad.br_oldnav6 = qmad.br_navigator && qmad.br_version < 7; qmad.br_strict = (dcm = document.compatMode) && dcm == "CSS1Compat"; qmad.br_ie = window.showHelp; qmad.str = (qmad.br_ie && !qmad.br_strict); if (!qmad.br_oldnav6) { if (!qmad.ritem) { qmad.ritem = new Object(); if (qmad.bvis.indexOf("qm_ritem_a(b.cdiv);") == -1) { qmad.bvis += "qm_ritem_a(b.cdiv);"; qmad.bhide += "qm_ritem_a_hide(a);"; } if (window.attachEvent) window.attachEvent("onload", qm_ritem_init); else if (window.addEventListener) window.addEventListener("load", qm_ritem_init, 1); var ca = "cursor:pointer;"; if (qmad.br_ie) ca = "cursor:hand;"; var wt = '<style type="text/css">.qmvritemmenu{}'; wt += ".qmmc .qmritem span{" + ca + "}"; document.write(wt + '</style>'); } }; function qm_ritem_init(e, spec) { var z; if ((z = window.qmv) && (z = z.addons) && (z = z.ritem) && (!z["on" + qmv.id] && z["on" + qmv.id] != undefined && z["on" + qmv.id] != null)) return; qm_ts = 1; var q = qmad.ritem; var a, b, r, sx, sy; z = window.qmv; for (i = 0; i < 10; i++) { if (!(a = document.getElementById("qm" + i)) || (!isNaN(spec) && spec != i)) continue; var ss = qmad[a.id]; if (ss && ss.ritem_size) { q.size = ss.ritem_size; q.apply = ss.ritem_apply; if (!q.apply) q.apply = "main"; q.angle = ss.ritem_angle_corners; q.corners_main = ss.ritem_main_apply_corners; if (!q.corners_main || q.corners_main.length < 4) q.corners_main = new Array(true, 1, 1, 1); q.corners_sub = ss.ritem_sub_apply_corners; if (!q.corners_sub || q.corners_sub.length < 4) q.corners_sub = new Array(true, 1, 1, 1); q.sactive = false; if (ss.ritem_show_on_actives) q.sactive = true; q.opacity = ss.ritem_opacity; if (q.opacity && q.opacity != 1) { var addf = ""; if (window.showHelp) addf = "filter:alpha(opacity=" + (q.opacity * 100) + ");"; q.opacity = "opacity:" + q.opacity + ";" + addf; } else q.opacity = ""; qm_ritem_add_rounds(a); } } }; function qm_ritem_a_hide(a) { if (a.idiv.hasritem && qmad.ritem.sactive) a.idiv.hasritem.style.visibility = "hidden"; }; function qm_ritem_a(a) { if (a) qmad.ritem.a = a; else a = qmad.ritem.a; if (a.idiv.hasritem && qmad.ritem.sactive) a.idiv.hasritem.style.visibility = "inherit"; if (a.ritemfixed) return; var aa = a.childNodes; for (var i = 0; i < aa.length; i++) { var b; if (b = aa[i].hasritem) { if (!aa[i].offsetWidth) { setTimeout("qm_ritem_a()", 10); return; } else { b.style.top = "0px"; b.style.left = "0px"; b.style.width = aa[i].offsetWidth + "px"; a.ritemfixed = 1; } } } }; function qm_ritem_add_rounds(a) { var q = qmad.ritem; var atags, ist, isd, isp, gom, gos; if (q.apply.indexOf("titles") + 1) ist = true; if (q.apply.indexOf("dividers") + 1) isd = true; if (q.apply.indexOf("parents") + 1) isp = true; if (q.apply.indexOf("sub") + 1) gos = true; if (q.apply.indexOf("main") + 1) gom = true; atags = a.childNodes; for (var k = 0; k < atags.length; k++) { if ((atags[k].tagName != "SPAN" && atags[k].tagName != "A") || (q.sactive && !atags[k].cdiv)) continue; var ism = qm_a(atags[k][qp]); if ((isd && atags[k].className.indexOf("qmdivider") + 1) || (ist && atags[k].className.indexOf("qmtitle") + 1) || (gom && ism && atags[k].tagName == "A") || (atags[k].className.indexOf("qmrounditem") + 1) || (gos && !ism && atags[k].tagName == "A") || (isp && atags[k].cdiv)) { var f = document.createElement("SPAN"); f.className = "qmritem"; f.setAttribute("qmvbefore", 1); var fs = f.style; fs.position = "absolute"; fs.display = "block"; fs.top = "0px"; fs.left = "0px"; fs.width = atags[k].offsetWidth + "px"; if (q.sactive && atags[k].cdiv.style.visibility != "inherit") fs.visibility = "hidden"; var size = q.size; q.mid = parseInt(size / 2); q.ps = new Array(size + 1); var t2 = 0; q.osize = q.size; if (!q.angle) { for (var i = 0; i <= size; i++) { if (i == q.mid) t2 = 0; q.ps[i] = t2; t2 += Math.abs(q.mid - i) + 1; } q.osize = 1; } var fi = ""; var ctype = "main"; if (!ism) ctype = "sub"; for (var i = 0; i < size; i++) fi += qm_ritem_get_span(size, i, 1, ctype); var cn = atags[k].cloneNode(true); var cns = cn.getElementsByTagName("SPAN"); for (var l = 0; l < cns.length; l++) { if (cns[l].getAttribute("isibulletcss") || cns[l].getAttribute("isibullet")) cn.removeChild(cns[l]); } fi += '<span class="qmritemcontent" style="display:block;border-style:solid;border-width:0px 1px 0px 1px;' + q.opacity + '">' + cn.innerHTML + '</span>'; for (var i = size - 1; i >= 0; i--) fi += qm_ritem_get_span(size, i, null, ctype); f.innerHTML = fi; f = atags[k].insertBefore(f, atags[k].firstChild); atags[k].hasritem = f; } if (atags[k].cdiv) new qm_ritem_add_rounds(atags[k].cdiv); } }; function qm_ritem_get_span(size, i, top, ctype) { var q = qmad.ritem; var mlmr; if (i == 0) { var mo = q.ps[size] + q.mid; if (q.angle) mo = size - i; var fs = ""; if (qmad.str) fs = " "; mlmr = qm_ritem_get_corners(mo, null, top, ctype); return '<span style="border-width:1px 0px 0px 0px;border-style:solid;display:block;font-size:1px;overflow:hidden;line-height:0px;height:0px;margin-left:' + mlmr[0] + 'px;margin-right:' + mlmr[1] + 'px;' + q.opacity + '">' + fs + '</span>'; } else { var md = size - (i); var ih = 1; var bs = 1; if (!q.angle) { if (i >= q.mid) ih = Math.abs(q.mid - i) + 1; else { bs = Math.abs(q.mid - i) + 1; md = q.ps[size - i] + q.mid; } if (top) q.osize += ih; } mlmr = qm_ritem_get_corners(md, bs, top, ctype); return '<span style="border-width:0px ' + mlmr[3] + 'px 0px ' + mlmr[2] + 'px;border-style:solid;display:block;overflow:hidden;font-size:1px;line-height:0px;height:' + ih + 'px;margin-left:' + mlmr[0] + 'px;margin-right:' + mlmr[1] + 'px;' + q.opacity + '"></span>'; } }; function qm_ritem_get_corners(mval, bval, top, ctype) { var q = qmad.ritem; var ml = mval; var mr = mval; var bl = bval; var br = bval; if (top) { if (!q["corners_" + ctype][0]) { ml = 0; bl = 1; } if (!q["corners_" + ctype][1]) { mr = 0; br = 1; } } else { if (!q["corners_" + ctype][2]) { mr = 0; br = 1; } if (!q["corners_" + ctype][3]) { ml = 0; bl = 1; } } return new Array(ml, mr, bl, br); }

//Add-On Code: Hover Fill Item Effect
//qmad.br_ie = window.showHelp; qmad.br_navigator = navigator.userAgent.indexOf("Netscape") + 1; qmad.br_version = parseFloat(navigator.vendorSub); qmad.br_oldnav6 = qmad.br_navigator && qmad.br_version < 7.2; if (!qmad.br_oldnav6) { if (!qmad.hoverfill) { qmad.hoverfill = new Object(); qmad.hoverfill.track = new Object(); qmad.hoverfill.tracktimer = new Object(); } if (qmad.bhide.indexOf("qm_hoverfill_active(new Object(),a,1);") == -1) { qmad.bhide += "qm_hoverfill_active(new Object(),a,1);"; if (window.attachEvent) window.attachEvent("onload", qm_hoverfill_init); else if (window.addEventListener) window.addEventListener("load", qm_hoverfill_init, 1); if (document.attachEvent) document.attachEvent("onmouseover", qm_hoverfill_hover_off); else if (window.addEventListener) document.addEventListener("mouseover", qm_hoverfill_hover_off, false); } }; function qm_hoverfill_init(e, spec) { var z; if ((z = window.qmv) && (z = z.addons) && (z = z.hoverfill) && (!z["on" + qmv.id] && z["on" + qmv.id] != undefined && z["on" + qmv.id] != null)) return; qm_ts = 1; var q = qmad.hoverfill; for (i = 0; i < 10; i++) { if (!(a = document.getElementById("qm" + i)) || (!isNaN(spec) && spec != i)) continue; var ss = qmad[a.id]; if (ss && (ss.hoverfill_main_type || ss.hoverfill_sub_type)) { qm_hoverfill_init_items(a, ss); } } }; function qm_hoverfill_init_items(a, ss) { var q = qmad.hoverfill; var aa, pf; var applyto = "all"; if (ss.hoverfill_apply_to) applyto = ss.hoverfill_apply_to; aa = a.getElementsByTagName("A"); for (var j = 0; j < aa.length; j++) { if ((applyto == "parent" && !aa[j].cdiv) || (applyto == "non-parent" && aa[j].cdiv)) continue; if (window.attachEvent) aa[j].attachEvent("onmouseover", qm_hoverfill_active); else if (window.addEventListener) aa[j].addEventListener("mouseover", qm_hoverfill_active, false); if (qm_a(aa[j][qp])) pf = "main"; else pf = "sub"; var type; if ((type = ss["hoverfill_" + pf + "_type"]) && type != "none") { var ofx = ss["hoverfill_" + pf + "_offset_width"]; if (!ofx) ofx = 0; var ofy = ss["hoverfill_" + pf + "_offset_height"]; if (!ofy) ofy = 0; var fss = ss["hoverfill_" + pf + "_fade_type_steps"]; if (!fss) fss = 20; var dir = ss["hoverfill_" + pf + "_direction"]; if (!dir) dir = "up"; var step = ss["hoverfill_" + pf + "_step_size"]; if (!step) step = 1; var ns = document.createElement("SPAN"); ns.style.display = "none"; ns.style.position = "absolute"; ns.style.fontSize = "1px"; ns.style.overFlow = "hidden"; if (aa[j].cdiv) ns.className = "qmhoverfill qmhparent"; else ns.className = "qmhoverfill"; ns.ishoverfill = 1; ns.hfowner = aa[j]; ns.noselect = 1; aa[j].style.position = "relative"; aa[j][qp].insertBefore(ns, aa[j]); aa[j].hfobject = ns; aa[j].hfdir = dir; aa[j].hftype = type; aa[j].hfstep = step; aa[j].hffadein = ss["hoverfill_" + pf + "_fade_in"]; aa[j].hffss = fss; aa[j].hffc = 0; aa[j].hfox = ofx; aa[j].hfoy = ofy; } } }; function qm_hoverfill_setfade(a, val) { if (qmad.br_ie) a.style.filter = "alpha(opacity=" + val * 100 + ")"; else a.style.opacity = val; }; function qm_hoverfill_active(e, a, hide, force) { e = e || window.event; if (!a) { a = e.srcElement || e.target; while (a.tagName != "A") a = a[qp]; } if (!hide) { var la = qmad.hoverfill.lasthl; if (la == a) return; if (la && la.hfobject.style.display == "block" && la.className.indexOf("qmactive") == -1 && la != a) { qm_hoverfill_hide_animate(la); qmad.hoverfill.lasthl = null; } var b; if ((b = a.hfobject) && !b.hfon && b[qp] && a[qp]) { var dir = a.hfdir; var type = a.hftype; b.style.display = "block"; if (type == "grow") { if (dir == "up" || dir == "down") { b.style.width = (a.offsetWidth + a.hfox) + "px"; b.style.height = "0px"; b.style.left = a.offsetLeft + "px"; if (dir == "up") b.style.top = (a.offsetTop + a.offsetHeight + a.hfoy) + "px"; else b.style.top = a.offsetTop + "px"; if (a.hffadein) a.hffs = (1 / (a.offsetHeight / a.hfstep)); } else if (dir == "right" || dir == "left") { b.style.height = (a.offsetHeight + a.hfoy) + "px"; b.style.width = "0px"; b.style.top = a.offsetTop + "px"; if (dir == "left") b.style.left = (a.offsetLeft + a.offsetWidth + a.hfox) + "px"; else b.style.left = a.offsetLeft + "px"; if (a.hffadein) a.hffs = (1 / (a.offsetWidth / a.hfstep)); } else if (dir == "center") { b.style.height = "0px"; b.style.width = "0px"; b.style.top = (a.offsetTop + parseInt((a.offsetHeight + a.hfoy) / 2)) + "px"; b.style.left = (a.offsetLeft + parseInt((a.offsetWidth + a.hfox) / 2)) + "px"; a.hfstep = 1; if (a.hfstep == 4) a.hfstep = 2; if (a.hfstep > 5) a.hfstep = 3; if (a.offsetWidth > a.offsetHeight) { b.chstep = (a.hfstep * 2); b.cwstep = parseInt(b.chstep * ((a.offsetWidth + a.hfox) / (a.offsetHeight + a.hfoy))); b.ctstep = a.hfstep; b.clstep = parseInt(b.cwstep / 2); if (a.hffadein) a.hffs = (1 / (((a.offsetHeight + a.hfoy) / 2) / b.ctstep)); } else { b.cwstep = (a.hfstep * 2); b.chstep = parseInt(b.chstep * ((a.offsetHeight + a.hfoy) / (a.offsetWidth + a.hfox))); b.clstep = a.hfstep; b.ctstep = parseInt(b.chstep / 2); if (a.hffadein) a.hffs = (1 / (((a.offsetWidth + a.hfox) / 2) / b.clstep)); } } } else if (type == "fade") { b.style.height = (a.offsetHeight + a.hfoy) + "px"; b.style.width = (a.offsetWidth + a.hfox) + "px"; b.style.top = a.offsetTop + "px"; b.style.left = a.offsetLeft + "px"; a.hffs = (1 / a.hffss); } qm_hoverfill_clear_timer(a); qm_hoverfill_animate(qm_hoverfill_get_tracking_id(b), false, force); qmad.hoverfill.lasthl = a; } } else { if (a.idiv) { qm_hoverfill_hide_animate(a.idiv); } } }; function qm_hoverfill_hide_animate(a) { qm_hoverfill_clear_timer(a); if (a.hfobject) qm_hoverfill_animate(qm_hoverfill_get_tracking_id(a.hfobject), 1); }; function qm_hoverfill_animate(id, hide, force) { var go = false; var hf = qmad.hoverfill.track["a" + id]; if (!hf || !hf[qp]) return; var atag = hf.hfowner; if (!atag[qp]) return; var type = atag.hftype; var dir = atag.hfdir; var step = atag.hfstep; var clstep = hf.clstep; var ctstep = hf.ctstep; var cwstep = hf.cwstep; var chstep = hf.chstep; if (hide) { step = -step; if (type == "grow" && dir == "center") { var clstep = -clstep; var ctstep = -ctstep; var cwstep = -cwstep; var chstep = -chstep; } } var a1, a2, a3, a4; if (type == "grow") { if (dir == "up" || dir == "left") { var p1 = "offsetTop"; var p2 = "offsetHeight"; var p3 = "height"; var p4 = "top"; var p5 = atag.hfoy; if (dir == "left") { p1 = "offsetLeft"; p2 = "offsetWidth"; p3 = "width"; p4 = "left"; p5 = atag.hfox; } a1 = atag[p1]; a2 = atag[p2]; if (((!hide && (hf[p1] - step) > a1) || (hide && (hf[p1] - step) < (a1 + a2 + p5))) && !force) { a1 = parseInt(hf.style[p4]); a2 = parseInt(hf.style[p3]); hf.style[p4] = (a1 - step) + "px"; hf.style[p3] = (a2 + step) + "px"; go = true; } else { if (!hide) { hf.hfon = true; hf.style[p4] = a1 + "px"; hf.style[p3] = (a2 + p5) + "px"; } else hf.style[p3] = "0px"; } } else if (dir == "down" || dir == "right") { var p1 = "offsetHeight"; var p2 = "offsetTop"; var p3 = "height"; var p5 = atag.hfoy; if (dir == "right") { p1 = "offsetWidth"; p2 = "offsetLeft"; p3 = "width"; p5 = atag.hfox; } a1 = atag[p2]; a2 = atag[p1]; if (((!hide && (hf[p1] + step) < (a2 + p5)) || (hide && (hf[p1] + step) > 0)) && !force) { hf.style[p3] = (parseInt(hf.style[p3]) + step) + "px"; go = true; } else { if (!hide) { hf.hfon = true; hf.style[p3] = (a2 + p5) + "px"; } else hf.style[p3] = "0px"; } } else if (dir == "center") { a1 = atag.offsetTop; a2 = parseInt((atag.offsetHeight + atag.hfoy) / 2); if (((!hide && (hf.offsetTop - ctstep) > a1) || (hide && (hf.offsetTop - ctstep) < (a1 + a2))) && !force) { a1 = parseInt(hf.style.top); a2 = parseInt(hf.style.height); a3 = parseInt(hf.style.left); a4 = parseInt(hf.style.width); hf.style.top = (a1 - ctstep) + "px"; hf.style.left = (a3 - clstep) + "px"; hf.style.height = (a2 + chstep) + "px"; hf.style.width = (a4 + cwstep) + "px"; go = true; } else { if (!hide) { a1 = atag.offsetTop; a2 = atag.offsetHeight + atag.hfoy; a3 = atag.offsetLeft; a4 = atag.offsetWidth + atag.hfox; hf.style.top = a1 + "px"; hf.style.left = a3 + "px"; hf.style.height = a2 + "px"; hf.style.width = a4 + "px"; hf.hfon = true; } else { hf.style.height = "0px"; hf.style.width = "0px"; } } } } else if (type == "fade") { if (((!hide && atag.hffc < 1) || (hide && atag.hffc > 0)) && !force) { go = true; } else { if (!hide) hf.hfon = true; } } if (atag.hffs) { if (!atag.hffc) atag.hffc = 0; if (!hide) { atag.hffc += atag.hffs; if (atag.hffc > 1 || !go) atag.hffc = 1; } else { atag.hffc -= atag.hffs; if (atag.hffc < .001 || !go) atag.hffc = 0; } qm_hoverfill_setfade(hf, atag.hffc); } if (go) { qmad.hoverfill.tracktimer["a" + id] = setTimeout("qm_hoverfill_animate(" + id + "," + hide + ")", 10); atag.hftrackid = id; hf.hfon = false; } else { qm_hoverfill_clear_timer(atag); if (hide) hf.style.display = "none"; } }; function qm_hoverfill_clear_timer(a) { var id; if (id = a.hftrackid) { clearTimeout(qmad.hoverfill.tracktimer["a" + id]); qmad.hoverfill.tracktimer["a" + id] = null; qmad.hoverfill.track["a" + id] = null; a.hftrackid = null; } }; function qm_hoverfill_get_tracking_id(a) { var track = qmad.hoverfill.track; var i = 1; while (track["a" + i]) i++; track["a" + i] = a; return i; }; function qm_hoverfill_hover_off(e, o) { var la = qmad.hoverfill.lasthl; if (la && la.hfobject.style.display == "block" && la.className.indexOf("qmactive") == -1) { qm_hoverfill_hide_animate(la); } qmad.hoverfill.lasthl = null; }

function getcss(selector) {
    var i, r, s = document.styleSheets && document.styleSheets[2]; if (s) {
        r = s.rules ? s.rules : s.cssRules; if (r) {
            i = r.length; while (i--) {
                if (r[i].selectorText.toLowerCase() === selector.toLowerCase()) {
                    return (r[i].style.backgroundColor);
                }
            }
        }
    }
    return null;
}